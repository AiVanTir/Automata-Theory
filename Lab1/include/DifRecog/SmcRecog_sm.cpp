//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SmcRecog.sm
//

#include "SmcRecog.hpp"
#include "SmcRecog_sm.h"

using namespace statemap;

// Static class declarations.
MAP1_START MAP1::START("MAP1::START", 0);
MAP1_TYPE MAP1::TYPE("MAP1::TYPE", 1);
MAP1_SIZE MAP1::SIZE("MAP1::SIZE", 2);
MAP1_SIZE_NUM MAP1::SIZE_NUM("MAP1::SIZE_NUM", 3);
MAP1_SIZE_END MAP1::SIZE_END("MAP1::SIZE_END", 4);
MAP1_EQUAL MAP1::EQUAL("MAP1::EQUAL", 5);
MAP1_BRACE_OPEN MAP1::BRACE_OPEN("MAP1::BRACE_OPEN", 6);
MAP1_FIRST_NUM MAP1::FIRST_NUM("MAP1::FIRST_NUM", 7);
MAP1_NEXT_NUM MAP1::NEXT_NUM("MAP1::NEXT_NUM", 8);
MAP1_CHECK MAP1::CHECK("MAP1::CHECK", 9);
MAP1_ERROR MAP1::ERROR("MAP1::ERROR", 10);

void SmcRecogState::CLOSE_BRACE(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::COMMA(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::EQUAL_SIGN(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::IDENT(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::INT(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::LBRACKET(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::LONG(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::NUMBER(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::OPEN_BRACE(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::RBRACKET(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::SHORT(SmcRecogContext& context)
{
    Default(context);
}

void SmcRecogState::Default(SmcRecogContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void MAP1_START::INT(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::TYPE);
    context.getState().Entry(context);


}

void MAP1_START::LONG(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::TYPE);
    context.getState().Entry(context);


}

void MAP1_START::SHORT(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::TYPE);
    context.getState().Entry(context);


}

void MAP1_TYPE::IDENT(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::SIZE);
    context.getState().Entry(context);


}

void MAP1_SIZE::LBRACKET(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::SIZE_NUM);
    context.getState().Entry(context);


}

void MAP1_SIZE_NUM::NUMBER(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::SIZE_END);
    context.getState().Entry(context);


}

void MAP1_SIZE_END::RBRACKET(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::EQUAL);
    context.getState().Entry(context);


}

void MAP1_EQUAL::EQUAL_SIGN(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::BRACE_OPEN);
    context.getState().Entry(context);


}

void MAP1_BRACE_OPEN::OPEN_BRACE(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::FIRST_NUM);
    context.getState().Entry(context);


}

void MAP1_FIRST_NUM::NUMBER(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::NEXT_NUM);
    context.getState().Entry(context);


}

void MAP1_NEXT_NUM::CLOSE_BRACE(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::CHECK);
    context.getState().Entry(context);


}

void MAP1_NEXT_NUM::COMMA(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::NEXT_NUM);
    context.getState().Entry(context);


}

void MAP1_NEXT_NUM::NUMBER(SmcRecogContext& context)
{

    context.getState().Exit(context);
    context.setState(MAP1::NEXT_NUM);
    context.getState().Entry(context);


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
